{
  "bitwise":false,       // This option prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others.
  "camelcase":false,     // This option allows you to force all variable names to use either camelCase style or UPPER_CASE with underscores.
  "curly":true,         // This option requires you to always put curly braces around blocks in loops and conditionals.
  "eqeqeq":true,        // This options prohibits the use of == and != in favor of === and !==.
  "forin":true,         // This option requires all for in loops to filter object's items.
  "immed":true,         // This option prohibits the use of immediate function invocations without wrapping them in parentheses.
  "latedef":true,       // This option prohibits the use of a variable before it was defined.
  "newcap":true,        // This option requires you to capitalize names of constructor functions.
  "noarg":true,         // This option prohibits the use of arguments.caller and arguments.callee.
  "noempty":true,       // This option warns when you have an empty block in your code.
  "nonew":true,         // This option prohibits the use of constructor functions for side-effects. Some people like to call constructor functions without assigning its result to any variable:
  "plusplus":false,      // This option prohibits the use of unary increment and decrement operators.
  "quotmark":"single",
  "regexp":false,       // This option prohibits the use of unsafe . in regular expressions.
  "undef":false,         // This option prohibits the use of explicitly undeclared variables.
  "unused":true,        // This option warns when you define and never use your variables.
  "strict":false,        // This option requires all functions to run in EcmaScript 5's strict mode.
  "trailing":true,     // This option makes it an error to leave a trailing whitespace in your code.

                         // Relaxing Options: These options allow you to suppress certain types of warnings. Use them only if you are absolutely positive that you know what you are doing.

  "asi": false,          // This option suppresses warnings about missing semicolons.
  "boss":false,          // This option suppresses warnings about the use of assignments in cases where comparisons are expected.
  "debug":false,         // This option suppresses warnings about the debugger statements in your code.
  "eqnull":false,        // This option suppresses warnings about == null comparisons. Such comparisons are often useful when you want to check if a variable is null or undefined.
  "es5":false,           // This option tells JSHint that your code uses ECMAScript 5 specific features such as getters and setters.
  "esnext":false,        // This option tells JSHint that your code uses ES.next specific features such as const.
  "evil":true,           // This option suppresses warnings about the use of eval.
  "expr":false,          // This option suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls.
  "funcscope":false,     // This option suppresses warnings about declaring variables inside of control structures while accessing them later from the outside.
  "globalstrict": false, // This option suppresses warnings about the use of global strict mode.
  "iterator":false,      // This option suppresses warnings about the __iterator__ property.
  "lastsemic":false,     // This option suppresses warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block:
  "laxbreak":false,      // This option suppresses most of the warnings about possibly unsafe line breakings in your code.
  "laxcomma":false,      // This option suppresses warnings about comma-first coding style.
  "loopfunc":true,       // This option suppresses warnings about functions inside of loops.
  "multistr":false,      // This option suppresses warnings about multi-line strings.
  "onecase":false,       // This option suppresses warnings about switches with just one case.
  "proto":false,         // This option suppresses warnings about the __proto__ property.
  "regexdash":false,     // This option suppresses warnings about unescaped - in the end of regular expressions.
  "scripturl":false,     // This option suppresses warnings about the use of script-targeted URLs—such as javascript:....
  "smarttabs": false,    // This option suppresses warnings about mixed tabs and spaces when the latter are used for alignmnent only.
  "shadow":false,        // This option suppresses warnings about variable shadowing i.e. declaring a variable that had been already declared somewhere in the outer scope.
  "sub":false,           // This option suppresses warnings about using [] notation when it can be expressed in dot notation: person['name'] vs. person.name.
  "supernew": false,     // This option suppresses warnings about "weird" constructions like new function () { ... } and new Object;. 
  "validthis":false,     // This option suppresses warnings about possible strict violations when the code is running in strict mode and you use this in a non-constructor function.

                         // Environments: These options pre-define global variables that are exposed by popular JavaScript libraries and runtime environments—such as browser or node.js.

  "browser":true,       // This option defines globals exposed by modern browsers. 
  "couch":false,         // This option defines globals exposed by CouchDB.
  "devel":false,         // This option defines globals that are usually used for logging poor-man's debugging: console, alert, etc.
  "dojo":false,          // This option defines globals exposed by the Dojo Toolkit.
  "jquery":true,        // This option defines globals exposed by the jQuery JavaScript library.
  "mootools":false,      // This option defines globals exposed by the MooTools JavaScript framework.
  "node":false,          // This option defines globals available when your code is running inside of the Node runtime environment.
  "nonstandard":false,   // This option defines non-standard but widely adopted globals such as escape and unescape.
  "prototypejs":false,   // This option defines globals exposed by the Prototype JavaScript framework.
  "rhino":false,         // This option defines globals available when your code is running inside of the Rhino runtime environment.
  "worker":false,        // This option defines globals available when your code is running inside of a Web Worker.
  "wsh":false,           // This option defines globals available when your code is running as a script for the Windows Script Host.

                         // Legacy: These options are legacy from JSLint. Aside from bug fixes they will not be improved in any way and might be removed at any point.
  "nomen":true,         // This option disallows the use of dangling _ in variables. We don't know why would you need it.
  "onevar":true,       // This option allows only one var statement per function. Some people think that having a single var in a function, at the top of the function, helps readability.
  "passfail":true,       // This option makes JSHint stop on the first error or warning.
  "white":true,          // This option make JSHint check your source code against Douglas Crockford's JavaScript coding style.
  "indent":2
}
