#!/usr/bin/perl -w 
use strict;


# a simple browser log parser
# 3/2005: nkrimm
#  
# log_parser [log_file] [html_output] [missed_entries_output]
#
# where:
# log_file is the location of an apache log file
# html_ouput {not implemented} is the location of the rendered output
# missed_entries_output {not implemented} collects any strings not caught by regexs, for debugging
# 
# to do
# remove html formatting from file
# debug regexs
# offer different sorts
# decorate 



my $output_location="/home/nkrimm/docroot/browserStats/index.html";  # convert to arg
my $extras_location="/home/nkrimm/docroot/browserStats/extras.html"; # convert to arg
my $now = localtime time; #used in output file

my $counter; # how many lines in log? 
my %results; # browser keys and count
my %extras; # strings missed by the regex
while(<>){
		chomp;
		if (/MSIE 6.0/ && /Windows XP/){$results{"IE_6.0_XP"}++; }
		if (/MSIE 6.0;/ && /Windows NT 5.1/ && /SV1/) { 
							if(/MSIE 6.0; AOL/){$results{"IE_6.0SP2AOL_XP"}++;}
							else { $results{"IE_6.0SP2_XP"}++; }
					}
		elsif (/MSIE 6.0/ && /Windows NT 5.2/) { 
							 $results{"IE_6.0SP2_Win.NET(BETA)"}++;
					}
		elsif (/MSIE 6.0/ && /Windows NT 5.1/ && !/SV1/) { 
							if(/MSIE 6.0; AOL/){$results{"IE_6.0AOL_XP"}++;}
							else { $results{"IE_6.0_XP"}++; }
					}
		elsif (/Lynx/){$results{"Lynx"}++;}	
		elsif (/MagpieRSS/){$results{"MagpieRSS"}++;}	
		elsif (/WebTV/){$results{"WebTV"}++;}	
	  elsif (/MSIE 6.0/ && /SV1/) {$results{"IE_6.0SP2_XX"}++;} # found some entries where OS is not reported
		elsif (/SURF/) { $results{"SURF Bot"}++;}
		elsif (/AOL TCP Net/) { $results{"AOL TCP Network Tester"}++;}
		elsif (/JobPier/) { $results{"Job Pier bot"}++;}
		elsif (/Jakarta Commons-HttpClient/) { $results{"Jakarta Commons-HttpClient"}++;}
		elsif (/Google/) { $results{"Googlebot"}++;}
		elsif (/Yahoo! Slurp/) { $results{"Yahoo! Slurp"}++;}
		elsif (/CheapSeeker/) { $results{"Bot_CheapSeaker"}++;}
		elsif (/MSIE 6.0/ && /Windows NT 5.0/) { 
					if(/AOL/){$results{"IE_6.0AOL_Win2K"}++;}
					else {$results{"IE_6.0_Win2K"}++;}}
		elsif (/MSIE/ && /6.0/ && /Windows NT/ && !/Windows NT 5/) { $results{"IE_6.0_NT"}++;}
		elsif (/MSIE/ && /6.0/ && /Windows 98/){ $results{"IE_6.0_98"}++;}
		elsif (/MSIE/ && /6.0/ && /Windows 95/ ){ $results{"IE_6.0_95"}++;}
		elsif (/MSIE 5.5; Windows NT 5.1/ && !/SV1/){ $results{"IE_5.5_XP"}++;}
		elsif (/MSIE 5.5; Windows NT 5.0/ ){ $results{"IE_5.5_2K"}++;}
		elsif (/MSIE/ && /5.5/ && /Windows NT/ && !/Windows NT 5/ ){ $results{"IE_5.5_NT"}++;}
		elsif (/MSIE/ && /5.5/ && /Windows 98/ && !/Windows 98 5/ ){ $results{"IE_5.5_98"}++;}
		elsif (/MSIE/ && /5.5/ && /Windows 95/ ){ $results{"IE_5.5_95"}++;}
		elsif (/Opera/){ $results{"Opera_All_versions"}++;}
		elsif (/MSIE/ && /5.0/ && /Windows NT 5/){ $results{"IE_5.0_NT"}++;}
		elsif (/MSIE/ && /5.0/ && /Windows NT/ && !/Windows NT 5/){ $results{"IE_5.0_NT"}++;}
		elsif (/MSIE/ && /5.0/ && /Windows 98/ && !/Windows 98 5/){ $results{"IE_5.0_98"}++;}
		elsif (/MSIE/ && /5.0/ && /Windows 95/ ){ $results{"IE_5.0_95"}++;}
		elsif (/Mozilla/ && /Linux/){$results{"Moz_Linux"}++;}
		elsif (/Gecko/ && /Firefox/ && /Windows NT 5.1/ ){ $results{"Firefox_1.0_XP"}++;}
		elsif (/Gecko/ && /Firefox/ && /Windows NT 5.0/ ){ $results{"Firefox_1.0_2K"}++;}
		elsif (/Gecko/ && /Firefox/ && /Windows NT/ && !/Windows NT 5/){ $results{"Firefox_1.0_NT"}++;}
		elsif (/Gecko/ && /Firefox/ && /Win 9x/){ $results{"Firefox_1.0_9x"}++;}
		elsif (/Win98/){ 
								if(/Gecko/ || /Firefox/){	$results{"Firefox_1.0_98"}++;}
				}
		elsif (/Gecko/ && /Firefox/ && /Windows 98/){ $results{"Firefox_1.0_98"}++;}
		elsif (/Gecko/ && /Firefox/ && /Windows 95/ ){ $results{"Firefox_1.0_95"}++;}
		elsif (/Gecko/ && /Mozilla\/5.0/ && !/Firefox\// && /Windows NT 5.1/) {$results{"MOZXP"}++;}
		elsif (/Gecko/ && /Mozilla\/5.0/  && !/FireFox/ && /Windows NT 5.0/ ) {$results{"MOZ2K"}++;}
		elsif (/Gecko/ && /Mozilla\/5.0/  && !/Firefox/ && /Windows NT/ && !/Windows NT 5/) {$results{"MOZNT"}++;}
		elsif (/Gecko/ && /Mozilla\/5.0/  && !/Firefox/ && /Windows 98/ && !/Windows 98 5/) {$results{"MOZ98"}++;}
		elsif (/Gecko/ && /Mozilla\/5.0/  && !/Firefox/ && /Windows 95/) {$results{"MOZ95"}++;}
		elsif (/Gecko/ && /Netscape/) {
								if (/Netscape6\/6.2/) {$results{"NS_6.2_All"}++;}
								elsif (/Netscape6\/6.0/) {$results{"NS_6.0_ALL"}++;}
								elsif (/Netscape7/) {$results{"NS_7.n_ALL"}++;}
							}
		elsif (/Gecko/ && /Netscape\/7/  && /Windows NT 5.0/) {$results{"NETSCAPE72K"}++;}
		elsif (/Gecko/ && /Netscape\/7/  &&  /Windows NT/ && !/Windows NT 5/) {$results{"NETSCAPE7NT"}++;}
		elsif (/Gecko/ && /Netscape\/7/  &&  /Windows 98/ && !/Windows 98/) {$results{"NETSCAPE798"}++;}
		elsif (/Gecko/ && /Netscape\/7/  &&  /Windows 95/) {$results{"NETSCAPE795"}++;}
		elsif (/Gecko/ && /Netscape\/6/  &&  /Windows NT 5.1/) {$results{"NETSCAPE6XP"}++;}
		elsif (/Gecko/ && /Netscape\/6/  && /Windows NT 5.0/) {$results{"NETSCAPE62K"}++;}
		elsif (/Gecko/ && /Netscape\/6/  &&  /Windows NT/ && !/Windows NT 5/) {$results{"NETSCAPE6NT"}++;}
		elsif (/Gecko/ && /Netscape\/6/  &&  /Windows 98/ && !/Windows 98 5/) {$results{"NETSCAPE698"}++;}
		elsif (/Gecko/ && /Netscape\/6/  &&  /Windows 95/) {$results{"NETSCAPE695"}++;}
		elsif (/like Gecko/ && /Safari/) {
						
						if(/Safari\/12/){ $results{"SAFARI 1.2"}++; }
						#http://developer.apple.com/internet/safari/uamatrix.html
						elsif(/Safari\/41/) { $results{"SAFARI 2.0"}++;}
						elsif(/Safari\/31/) { $results{"SAFARI 1.3"}++;}
						elsif(/Safari\/12/) { $results{"SAFARI 1.2"}++;}
						elsif(/Safari\/10/) { $results{"SAFARI 1.1"}++;}
						elsif(/Safari\/85/) { $results{"SAFARI 1.0"}++;}
						else { $results{"SAFARI Other"}++;}
					}
		elsif (/Mozilla\/5.0/ && /Macintosh/ ) {$results{"MOZILLA_MAC"}++;}
		elsif (/Mozilla\/5.0/ && /Netscape6/){
						if(/Netscape6\/6.2/ && /Macintosh; U; PPC/) { $results{"NS_6.2_MAC"}++; }
						elsif(/Netscape6\/6.2/ && /Windows;/) { $results{"NS_6.2_WIN"}++; }
					}
		elsif (/MSIE 5.2/ && /Mac_PowerPC/ ) {$results{"MACIE52"}++;}
		elsif (/MSIE 5.1/ && /Mac_PowerPC/ ) {$results{"MACIE51"}++;}
		elsif (/MSIE 5.0/ && /Mac_PowerPC/ ) {$results{"MACIE50"}++;}
		else {
					$extras{"$_"}++;
					$results{"uncounted"}++;
					}
	 $counter++;	
}


sub hashValueDescendingNum {
   $results{$b} <=> $results{$a};
}






  open(log_out, ">$output_location");
  print log_out "<html>\n";
  print log_out "<head>\n";
	print log_out "<title>Orbitz report: Current browser stats</title>\n";
	print log_out "<link rel=\"stylesheet\" href=\"styles.css\" />\n";
  print log_out "</head>\n";
	print log_out "<h1>Total sessions counted: $counter</h1>";
	print log_out "<h2>Report date: $now</h2>";
  print log_out "<table id=\"details\">";
    print log_out "<tr>\n";
    print log_out "<th class=\"user-agent\">User Agent</th>\n";
    print log_out "<th class=\"count\">Count</th>\n";
    print log_out "<th class=\"percent\">Percent</th>\n";
    print log_out "</tr>\n";
#	while ( my ($key, $value) = each(%results) ) {
	foreach my $key (sort hashValueDescendingNum (keys(%results))){
		print log_out "<tr>\n";
		print log_out "<td class=\"user-agent\">$key</td>\n";
		print log_out "<td class=\"count\">$results{$key}</td>\n";
		my $percent=($results{$key}/$counter)*100;
		my $fpercent=sprintf("%.2f",$percent);
		print log_out "<td class=\"percent\">$fpercent%</td>\n";
		print log_out "</tr>\n";
	}
	print log_out "</table>";

	print log_out "</body>\n";
  print log_out "</html>\n";	
  close(log_out);

open(missed_entries, ">$extras_location");

while ( my ($key, $value) = each(%extras) ) {
		print missed_entries "$key\n\n";
}
close(missed_entries);
